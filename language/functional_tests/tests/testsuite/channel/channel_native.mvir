//! account: bob
//! account: alice

//! new-transaction
module Token {
    import 0x0.ChannelAccount;
    import 0x0.ChannelTransaction;
    resource T {
        value: u64
    }

    public new(value:u64): Self.T {
        return T{ value: move(value) };
    }

    public value(token_ref: &Self.T):u64 {
        return *&move(token_ref).value;
    }

    public destroy(token: Self.T){
        let value:u64;
        T{value} = move(token);
        return;
    }

    public move_to_channel_sender(value:u64) {
        let t: Self.T;

        t = Self.new(move(value));
        ChannelAccount.move_to_channel_sender<Self.T>(move(t)); // Self is necessary
        return;
    }

    public move_to_channel_receiver(value:u64) {
        let t: Self.T;

        t = Self.new(move(value));
        ChannelAccount.move_to_channel_receiver<Self.T>(move(t)); // Self is necessary
        return;
    }

    public exist_channel_sender(): bool {
        return ChannelAccount.exist_channel_sender<Self.T>();
    }

    public exist_channel_receiver(): bool {
        return ChannelAccount.exist_channel_receiver<Self.T>();
    }

    public move_from_channel_sender(): Self.T {
        let t: Self.T;
        t = ChannelAccount.move_from_channel_sender<Self.T>();
        return move(t);
    }

    public move_from_channel_receiver(): Self.T {
        let t: Self.T;
        t = ChannelAccount.move_from_channel_receiver<Self.T>();
        return move(t);
    }

    public sender_channel_value():u64{
        let ref: &mut Self.T;
        ref = ChannelAccount.native_borrow_channel<Self.T>(true);
        return *&move(ref).value;
    }

    public receiver_channel_value():u64{
        let ref: &mut Self.T;
        ref = ChannelAccount.native_borrow_channel<Self.T>(false);
        return *&move(ref).value;
    }

    public test1() {

        assert(ChannelTransaction.native_is_channel_txn() == true, 11);
        assert(Self.exist_channel_sender() == false, 11);
        assert(Self.exist_channel_receiver() == false, 11);

        Self.move_to_channel_sender(1);

        assert(Self.exist_channel_sender() == true, 11);
        assert(Self.exist_channel_receiver() == false, 11);

        return;
    }

    public test2() {

        assert(Self.exist_channel_sender() == true, 7);
        assert(Self.exist_channel_receiver() == false, 6);

        Self.move_to_channel_receiver(1);

        assert(Self.exist_channel_sender() == true, 9);
        assert(Self.exist_channel_receiver() == true, 8);

        return;
    }

    public test3() {
        let alice_value: u64;
        let bob_value: u64;

        assert(ChannelTransaction.native_is_channel_txn() == true, 42);

        assert(Self.exist_channel_sender() == true, 9);
        assert(Self.exist_channel_receiver() == true, 8);

        alice_value = Self.sender_channel_value();
        bob_value = Self.receiver_channel_value();

        assert(move(alice_value) == 1, 42);
        assert(move(bob_value) == 1, 42);

        return;
    }

    public test4() {
        let alice_token: Self.T;
        let alice_value: u64;
        let bob_token: Self.T;
        let bob_value: u64;

        assert(ChannelTransaction.native_is_channel_txn() == true, 42);

        alice_token = Self.move_from_channel_sender();
        alice_value = Self.value(&alice_token);

        assert(move(alice_value) == 1, 42);
        Self.destroy(move(alice_token));

        assert(Self.exist_channel_sender() == false, 42);
        assert(Self.exist_channel_receiver() == true, 42);

        bob_token = Self.move_from_channel_receiver();
        bob_value = Self.value(&bob_token);

        assert(move(bob_value) == 1, 42);
        Self.destroy(move(bob_token));

        assert(Self.exist_channel_sender() == false, 42);
        assert(Self.exist_channel_receiver() == false, 42);

        return;
    }
}

//! new-transaction
//! sender: alice
//! receiver: bob
0x0.ChannelAccount.open 100000 50000

//! new-transaction
//! sender: alice
//! receiver: bob
{{default}}.Token.test1

//! new-transaction
//! sender: alice
//! receiver: bob
{{default}}.Token.test2

//! new-transaction
//! sender: alice
//! receiver: bob
{{default}}.Token.test3

//! new-transaction
//! sender: alice
//! receiver: bob
{{default}}.Token.test4

