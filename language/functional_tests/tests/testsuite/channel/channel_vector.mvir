//! account: bob
//! account: alice

//! new-transaction
module VecTest{
    import 0x0.Vector;
    import 0x0.ChannelAccount;

    resource VecBox {
        grid: Vector.T<bool>,
    }

    public test_move_vec_to_sender() {
        let t: Self.VecBox;
        let grid: Vector.T<bool>;

        grid = Vector.empty<bool>();

        t = VecBox {
            grid: move(grid),
        };

        ChannelAccount.move_to_channel_sender<Self.VecBox>(move(t));

        return;
    }

    public test_move_vec_from_sender() {
        let t: Self.VecBox;
        let grid: Vector.T<bool>;

        t = ChannelAccount.move_from_channel_sender<Self.VecBox>();
        VecBox{ grid } = move(t);
        Vector.destroy_empty<bool>(move(grid));
        return;
    }

    public test_move_vec_to_receiver() {
        let t: Self.VecBox;
        let grid: Vector.T<bool>;

        grid = Vector.empty<bool>();

        t = VecBox {
            grid: move(grid),
        };

        ChannelAccount.move_to_channel_receiver<Self.VecBox>(move(t));

        return;
    }

    public test_move_vec_from_receiver() {
        let t: Self.VecBox;
        let grid: Vector.T<bool>;

        t = ChannelAccount.move_from_channel_receiver<Self.VecBox>();
        VecBox{ grid } = move(t);
        Vector.destroy_empty<bool>(move(grid));
        return;
    }
}

//! new-transaction
//! sender: alice
//! receiver: bob

0x0.ChannelAccount.open 100000 50000

//! new-transaction
//! sender: alice
//! receiver: bob

{{default}}.VecTest.test_move_vec_to_sender

//! new-transaction
//! sender: alice
//! receiver: bob

{{default}}.VecTest.test_move_vec_from_sender


//! new-transaction
//! sender: alice
//! receiver: bob

{{default}}.VecTest.test_move_vec_to_receiver

//! new-transaction
//! sender: alice
//! receiver: bob

{{default}}.VecTest.test_move_vec_from_receiver

