// The module for the channel resource
module Channel {
    import 0x0.LibraAccount;
    import 0x0.LibraCoin;
    import 0x0.LibraSystem;
    import 0x0.HashTimeLock;
    import 0x0.ChannelTransaction;

    //just for test
    public do_nothing(){
        return;
    }

   // Transfer LibraCoin from proposer's LibraAccount to OffchainAccount
    public deposit(amount: u64){
        let deposit_coin: LibraCoin.T;
        let proposer: address;

        proposer = ChannelTransaction.get_proposer();
        //should allow deposit to other participant?
        assert(get_txn_sender() == copy(proposer), 1006);
        deposit_coin = LibraAccount.withdraw_from_sender(copy(amount));

        LibraAccount.deposit_to_channel(move(deposit_coin));
        return;
    }

    // Transfer LibraCoin from proposer's OffchainAccount to LibraAccount
    public withdraw(amount: u64){
        let proposer: address;
        let withdraw_coin: LibraCoin.T;

        proposer = ChannelTransaction.get_proposer();
        assert(get_txn_sender() == copy(proposer), 1117);
        withdraw_coin = LibraAccount.withdraw_from_channel(move(amount));
        LibraAccount.deposit(move(proposer), move(withdraw_coin));
        return;
    }

    public send_payment(payee: address, amount: u64, hash_lock: bytearray){
        let proposer: address;
        let coin: LibraCoin.T;

        proposer = ChannelTransaction.get_proposer();
        coin = LibraAccount.withdraw_from_channel(copy(amount));
        //TODO payment timeout
        HashTimeLock.lock_in_channel(copy(payee), move(coin), move(hash_lock), LibraSystem.get_current_block_height()+10);
        return;
    }

    public receive_payment(preimage: bytearray){
        let proposer: address;
        let coin: LibraCoin.T;

        proposer = ChannelTransaction.get_proposer();
        coin = HashTimeLock.unlock_in_channel(move(preimage));
        LibraAccount.deposit_to_channel(move(coin));
        return;
    }

    public cancel_payment_after_timeout(){
        let proposer: address;
        let coin: LibraCoin.T;

        proposer = ChannelTransaction.get_proposer();
        coin = HashTimeLock.unlock_in_channel_after_timeout();
        LibraAccount.deposit_to_channel(move(coin));
        return;
    }
}
